# PASSOS:

//
se eu quiser montar um web app com javascript, html, css, node.js, jwt, express, postgresql utilizando react como frontend,
//

X Inicialize o projeto Node.js com npm init.

X Configure o backend com Express e conecte ao PostgreSQL.

X Implemente autenticação com JWT no backend.

X Crie rotas públicas e protegidas no backend.

Configure CORS para permitir requisições do React.

X Inicialize o frontend com React usando npx create-react-app.

Implemente páginas de login, registro e dashboard no React.

Faça requisições HTTP (ex: com axios) do React para o backend.

Armazene o token JWT no frontend (ex: localStorage).

Proteja rotas no React verificando o token JWT.

Estilize o frontend com CSS ou bibliotecas (ex: Tailwind).

Implemente logout limpando o token e redirecionando.

Teste toda a comunicação entre frontend e backend.

Implemente deploy do backend (ex: Render, Railway) e frontend (ex: Vercel, Netlify).

# Fluxograma:
    graph TD
    A[Frontend: Usuário Clica no Botão] --> B[React Component: Event Handler];
    B --> C{Frontend: Envio de Requisição HTTP (fetch/axios)};

    C --> D[Backend: Rota API (Endpoint)];
    D --> E[Backend: Controller/Service];
    E --> F[Backend: Lógica de Negócio (Opcional)];
    F --> G[Backend: Camada de Acesso a Dados (DAO/Repository)];
    G --> H[Banco de Dados: Execução da Query];
    H --> I[Banco de Dados: Retorno dos Dados];

    I --> J[Backend: Camada de Acesso a Dados (DAO/Repository)];
    J --> K[Backend: Controller/Service];
    K --> L[Backend: Resposta HTTP (JSON)];

    L --> M[Frontend: Recebimento da Resposta HTTP];
    M --> N[React Component: Atualização do Estado/UI];
    N --> O[Frontend: Exibição dos Dados ao Usuário]

# Folder Organization:

    backend/
    ├── controller/
    │   ├── posicoesController.js
    │   ├── posicoesEnviadasController.js
    │   └── userController.js
    ├── db/
    │   └── client.js
    ├── middleware/
    │   └── authMiddleware.js
    ├── repositories/
    │   ├── posicoesEnviadasRepository.js
    │   ├── techniqueRepository.js
    │   └── userRepository.js
    ├── routes/
    │   ├── posicoesEnviadasRoutes.js
    │   ├── posicoesRoutes.js
    │   └── userRoutes.js
    ├── services/
    │   ├── posicoesEnviadasService.js
    │   ├── techniqueService.js
    │   └── userService.js
    └── server.js

    frontend/
    └── src/
        ├── api/
        │   ├── apiClient.js
        │   ├── authApi.js
        │   └── posicoesApi.js
        ├── components/
        │   ├── AcoesUsuario.jsx
        │   ├── AtualizarSenhaForm.jsx
        │   ├── EnviarTecnicaForm.jsx
        │   ├── DeleteTecnicaButton.jsx
        │   ├── LoginRegisterForm.jsx
        │   ├── PainelAdmin.jsx
        │   ├── TecnicasSelector.jsx
        │   ├── UserPanel.jsx
        │   └── UsuarioLogado.jsx
        ├── hooks/
        │   └── UsePainelAdmin.jsx
        ├── pages/
        │   └── Dashboard.jsx
        ├── services/
        │   ├── authService.js
        │   └── posicoesService.js
        ├── App.css
        ├── app.jsx
        ├── index.css
        ├── main.jsx
        └── index.html

# Commit msg:

    feat:	Nova funcionalidade
    fix:	Correção de bug
    docs:	Alterações na documentação
    style:	Formatação, ponto e vírgula, espaços
    refactor:	Refatoração de código (sem mudar comportamento)
    test:	Adição ou modificação de testes
    chore:	Tarefas de manutenção (build, deps etc.)

# Resumo Entrevista:

    Desenvolvi uma aplicação fullstack com Node.js, PostgreSQL e React, utilizando uma arquitetura em camadas no backend (com controllers, services e repositórios) e organização modular no frontend com React.
    O projeto simula uma base de dados interativa para técnicas de Jiu-Jitsu, permitindo cadastro, visualização e gerenciamento de movimentos, com autenticação de usuários, painel administrativo e sistema de validação.
    A comunicação entre frontend e backend é feita via APIs RESTful, com controle de acesso através de JWT e middleware de autenticação.

    -mais técnico (para entrevistas técnicas ou áreas mais voltadas ao desenvolvimento):

        A estrutura do backend segue princípios de Clean Code e responsabilidade única, com camadas bem definidas para controller, service e repository. No frontend, utilizei React com organização por componentes reutilizáveis, separação da lógica de negócio em serviços e hooks customizados, e conexão com backend via Axios encapsulado.

    -Ferramentas e boas praticas:
    Node.js + Express no backend

        PostgreSQL como banco de dados relacional

        JWT para autenticação

        React.js com componentes reutilizáveis

        Axios com apiClient centralizado

        Hooks personalizados

        Separação de responsabilidades (SoC) tanto no frontend quanto no backend

        Padrões REST para comunicação entre frontend e backend